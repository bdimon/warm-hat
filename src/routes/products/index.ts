import express from "express";
import { supabase } from "@/lib/supabase";
import { v4 as uuidv4 } from "uuid";

const router = express.Router();
// üîÅ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
// üîπ GET /api/products ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
router.get("/", async (req, res) => {
  const page = parseInt(req.query.page as string) || 1;
  const pageSize = parseInt(req.query.pageSize as string) || 20;
  const sortBy = (req.query.sortBy as string) || "created_at"; // –ø–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const order = (req.query.order as string) === "asc" ? "asc" : "desc"; // –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

  const minPrice = parseInt(req.query.minPrice as string) || 0;
  const maxPrice =
    parseInt(req.query.maxPrice as string) || Number.MAX_SAFE_INTEGER;

  const from = (page - 1) * pageSize;
  const to = from + pageSize - 1;

  const { data, error, count } = await supabase
    .from("products")
    .select("*", { count: "exact" })
    .gte("price", minPrice)
    .lte("price", maxPrice)
    .order(sortBy, { ascending: order === "asc" })
    .range(from, to);

  if (error) return res.status(500).json({ error: error.message });

  res.json({
    data,
    pagination: {
      page,
      pageSize,
      total: count,
      totalPages: count ? Math.ceil(count / pageSize) : null,
    },
  });
});

// üîπ GET /api/products/:id ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ id
router.get("/:id", async (req, res) => {
  const { id } = req.params;
  const { data, error } = await supabase
    .from("products")
    .select("*")
    .eq("id", id)
    .single();
  if (error) return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  res.json(data);
});
// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
// üîπ POST /api/products ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
router.post("/", async (req, res) => {
  const { name, price, quantity, description, images } = req.body;
  const { error } = await supabase.from("products").insert([
    {
      id: uuidv4(),
      name,
      price,
      quantity,
      description,
      images,
    },
  ]);
  if (error) return res.status(500).json({ error: error.message });
  res.status(201).json({ message: "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω" });
});

// üîπ PUT /api/products/:id ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
router.put("/:id", async (req, res) => {
  const { id } = req.params;
  const { name, price, quantity, description, images } = req.body;
  const { error } = await supabase
    .from("products")
    .update({
      name,
      price,
      quantity,
      description,
      images,
    })
    .eq("id", id);
  if (error) return res.status(500).json({ error: error.message });
  res.json({ message: "–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω" });
});

// üîπ DELETE /api/products/:id ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
router.delete("/:id", async (req, res) => {
  const { id } = req.params;
  const { error } = await supabase.from("products").delete().eq("id", id);
  if (error) return res.status(500).json({ error: error.message });
  res.json({ message: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω" });
});

export default router;
/** 
 * 1. GET /api/products ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
 * 2. GET /api/products/:id ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ id
 * 3. POST /api/products ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
 * 4. PUT /api/products/:id ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
 * 5. DELETE /api/products/:id ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
 * for thunderclient GET http://localhost:3010/api/products?page=2&pageSize=10
 * for thunderclient GET http://localhost:3010/api/products?page=2&pageSize=10
 */
