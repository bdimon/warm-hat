import { createClient } from "@supabase/supabase-js";
import { v4 as uuidv4 } from "uuid";
import "dotenv/config";


const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

// –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
async function clearTable(tableName: string) {
  console.log(`Clearing table: ${tableName}`);
  const { data, error, count } = await supabase
    .from(tableName)
    .delete({ count: "exact" })
    .not("id", "is", null); // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏

  if (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error);
  } else {
    console.log(`üßπ –¢–∞–±–ª–∏—Ü–∞ ${tableName} –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${count}`);
  }
}

// –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
async function clearTables() {
  await clearTable("orders");
  await clearTable("products");
  const { count } = await supabase
    .from("products")
    .select("*", { count: "exact", head: true });
  console.log("üßÆ –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å:", count);
  await clearTable("users");
  await new Promise((res) => setTimeout(res, 1000));
}
// 2. –°–∏–¥–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
async function seedProducts() {
  const products = Array.from({ length: 10 }, (_, i) => ({
    id: uuidv4(),
    name: `–ü—Ä–æ–¥—É–∫—Ç #${i + 1}`,
    price: Math.floor(Math.random() * 3000) + 500,
    quantity: Math.floor(Math.random() * 20) + 1,
    description: `–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ #${i + 1}`,
    images: [
      `https://via.placeholder.com/300x300.png?text=Item+${i + 1}`,
      `https://via.placeholder.com/300x300.png?text=Item+${i + 1}+Alt`,
      `https://via.placeholder.com/300x300.png?text=Item+${i + 1}+Alt`,
    ],
  }));

  const { error } = await supabase.from("products").insert(products);
  if (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", error);
  } else {
    console.log("üß∂ –î–æ–±–∞–≤–ª–µ–Ω—ã 100 –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
  }
}
// 3. –°–∏–¥–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function seedUsers() {
  const users = Array.from({ length: 5 }, (_, i) => ({
    id: uuidv4(),
    email: `user${i + 1}@test.com`,
    full_name: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${i + 1}`,
    created_at: new Date().toISOString(),
  }));
  const { error } = await supabase.from("users").insert(users);
  if (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
  } else {
    console.log("üë§ –î–æ–±–∞–≤–ª–µ–Ω—ã 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
  }
}

// 4. –°–∏–¥–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤
async function seedOrders() {
  const users = await supabase.from("users").select("id");
  if (users.data) {
    const orders = users.data.flatMap((user) =>
      Array.from({ length: 2 }, () => ({
        id: uuidv4(),
        user_id: user.id,
        total: Math.floor(Math.random() * 5000) + 1000,
        status: "created",
        items: {
          quantity: Math.floor(Math.random() * 5) + 1,
          price: Math.floor(Math.random() * 3000) + 500,
        },
        created_at: new Date().toISOString(),
      }))
    );
    const { error } = await supabase.from("orders").insert(orders);
    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", error);
    } else {
      console.log("üì¶ –î–æ–±–∞–≤–ª–µ–Ω—ã 10 –∑–∞–∫–∞–∑–æ–≤");
    }
  } else {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", users.error);
  }
}

async function seed() {
  console.log("üîÅ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...");

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
  clearTables();

  // –°–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
  // await seedProducts();
  // await seedUsers();
  // await seedOrders();

  console.log("‚úÖ –°–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
}

seed();
