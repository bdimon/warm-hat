// pages/account.tsx (–∏–ª–∏ /profile)
// import  ProfileForm  from "@/components/ProfileForm";
import AuthSettingsForm from "@/components/AuthSettingsForm";
import { useUserOrders } from "@/hooks/use-user-orders";
import { useUser } from "@/hooks/use-user-profile";
import OrderCard from "@/components/ui/order-card";
import { useMemo, useState } from "react";
import  Header from "@/components/Header";
import { useParams, useNavigate } from "react-router-dom";



// interface ProfilePageProps {
//   open: boolean;
//   onClose: () => void;
// }

// export default function AccountPage({ open, onClose }: ProfilePageProps)  {
export default function AccountPage()  {
  const { user } = useUser();
  const { orders, loading } = useUserOrders();
  const [page, setPage] = useState(1);
  const navigate = useNavigate();


  const ORDERS_PER_PAGE = 10;


  const totalPages = useMemo(
    () => Math.ceil(orders.length / ORDERS_PER_PAGE),
    [orders]
  );

  const paginatedOrders = useMemo(
    () =>
      orders.slice(
        (page - 1) * ORDERS_PER_PAGE,
        page * ORDERS_PER_PAGE
      ),
    [orders, page]
  );

  if (!user) return <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.</p>;

    return (
      <>
      <div className="min-h-screen bg-gray-100">
              <Header showBackButton onBackClick={() => navigate("/")} />

     {/* // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ—Ç—Å—Ç—É–ø—ã, –∫–∞–∫ –æ–±—ã—á–Ω–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü */}
      <div className="container mx-auto pt-32 pb-20 px-4">
              

        <h1 className="text-3xl font-bold mb-6">–ü—Ä–æ—Ñ–∏–ª—å</h1>
        <div className="space-y-8"> {/* –£–≤–µ–ª–∏—á–∏–º –Ω–µ–º–Ω–æ–≥–æ –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ */}
          <AuthSettingsForm /> {/* onClose –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º, –∫–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è" –Ω–µ –±—É–¥–µ—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è */}
        
        <div>
          <h2 className="text-xl font-semibold mb-2">üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã</h2>
          {loading ? (
            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          ) : orders.length === 0 ? (
            <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.</p>
          ) : (
           <ul className="space-y-4">
            {paginatedOrders.map((order) => (
                <OrderCard key={order.id} order={order} />
              ))
              }              
            <div className="flex items-center justify-center gap-4 mt-4">
              <button
                  className="px-3 py-1 border rounded disabled:opacity-50"
                  onClick={() => setPage((p) => Math.max(p - 1, 1))}
                  disabled={page === 1}
              >
                  ‚¨Ö –ù–∞–∑–∞–¥
              </button>
              <span>
                  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {totalPages}
              </span>
              <button
                  className="px-3 py-1 border rounded disabled:opacity-50"
                  onClick={() => setPage((p) => Math.min(p + 1, totalPages))}
                  disabled={page === totalPages}
              >
                  –í–ø–µ—Ä—ë–¥ ‚û°
              </button>
            </div>
          </ul>              
        )}
        </div>
      
    </div>
    </div>
    // </div>

    );
    </>
    );
}
