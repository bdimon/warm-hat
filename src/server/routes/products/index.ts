import express from "express";
import { supabase, supabaseService } from "@/lib/supabase-client"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–∞ –∫–ª–∏–µ–Ω—Ç–∞
import { Product, MultilingualString, RegionalPrice, RawProduct, SupportedLanguage } from "@/types/Product";
import { mapProductToAPI, mapProductFromAPI } from "@/lib/mappers/products";

const router = express.Router();

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ supabaseService –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
router.use((req, res, next) => {
  if ((req.method === 'POST' || req.method === 'PATCH' || req.method === 'DELETE') && !supabaseService) {
    return res.status(503).json({ error: "Service client not available. Check server configuration." });
  }
  next();
});

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
interface ProductValidationData extends Partial<Product> {
  name?: string | MultilingualString;
  price?: number | RegionalPrice;
  salePrice?: number | RegionalPrice | undefined;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞
 * @param data - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @returns –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç
 */
const validateMultilingualData = (data: ProductValidationData): string[] => {
  const errors: string[] = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã name
  if (data.name && typeof data.name === 'object') {
    const nameObj = data.name as MultilingualString;
    if (!nameObj.en) {
      errors.push("–ü–æ–ª–µ name –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –∞–Ω–≥–ª–∏–π—Å–∫—É—é –≤–µ—Ä—Å–∏—é (en)");
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã price
  if (data.price && typeof data.price === 'object') {
    const priceObj = data.price as RegionalPrice;
    if (!priceObj.en || typeof priceObj.en !== 'number') {
      errors.push("–ü–æ–ª–µ price –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –∞–Ω–≥–ª–∏–π—Å–∫—É—é –≤–µ—Ä—Å–∏—é (en) —Å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º");
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è price - —á–∏—Å–ª–∞
    Object.entries(priceObj).forEach(([lang, value]) => {
      if (typeof value !== 'number') {
        errors.push(`–¶–µ–Ω–∞ –¥–ª—è —è–∑—ã–∫–∞ ${lang} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º`);
      }
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã salePrice, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
  if (data.salePrice && typeof data.salePrice === 'object') {
    const salePriceObj = data.salePrice as RegionalPrice;
    if (!salePriceObj.en || typeof salePriceObj.en !== 'number') {
      errors.push("–ü–æ–ª–µ salePrice –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –∞–Ω–≥–ª–∏–π—Å–∫—É—é –≤–µ—Ä—Å–∏—é (en) —Å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º");
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è salePrice - —á–∏—Å–ª–∞
    Object.entries(salePriceObj).forEach(([lang, value]) => {
      if (typeof value !== 'number') {
        errors.push(`–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–ª—è —è–∑—ã–∫–∞ ${lang} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º`);
      }
    });
  }
  
  return errors;
}

// üîÅ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–º –ø–æ–ª—è–º
router.get("/", async (req, res) => {
  const page = parseInt(req.query.page as string) || 1;
  const pageSize = parseInt(req.query.pageSize as string) || 20;
  const sortBy = (req.query.sortBy as string) || "created_at"; // –ø–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const order = (req.query.order as string) === "asc" ? "asc" : "desc"; // –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  const language = (req.query.language as SupportedLanguage) || 'en'; // —è–∑—ã–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ü–µ–Ω—ã

  const minPrice = parseInt(req.query.minPrice as string) || 0;
  const maxPrice =
    parseInt(req.query.maxPrice as string) || Number.MAX_SAFE_INTEGER;

  const from = (page - 1) * pageSize;
  const to = from + pageSize - 1;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON-–ø—É—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–µ–Ω–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —è–∑—ã–∫–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
  const pricePath = `price->${language}`;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π
  let query = supabase
    .from("products")
    .select("*", { count: "exact" })
    .gte(pricePath, minPrice)
    .lte(pricePath, maxPrice);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Å —É—á–µ—Ç–æ–º –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π
  if (sortBy === "price") {
    query = query.order(pricePath, { ascending: order === "asc" });
  } else if (sortBy === "name") {
    query = query.order(`name->${language}`, { ascending: order === "asc" });
  } else {
    query = query.order(sortBy, { ascending: order === "asc" });
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
  query = query.range(from, to);
  
  const { data, error, count } = await query;

  if (error) return res.status(500).json({ error: error.message });

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
  const mappedData = data.map(item => mapProductFromAPI(item as RawProduct));

  res.json({
    data: mappedData,
    pagination: {
      page,
      pageSize,
      total: count,
      totalPages: count ? Math.ceil(count / pageSize) : null,
    },
  });
});
 
// üîπ GET /api/products/:id ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ id
router.get("/:id", async (req, res) => {
  const { id } = req.params;
  const { data, error } = await supabase
    .from("products")
    .select("*")
    .eq("id", id)
    .single();
  
  if (error) return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
  const mappedData = mapProductFromAPI(data as RawProduct);
  
  res.json(mappedData);
});

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
// üîπ POST /api/products ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
router.post("/", async (req, res) => {
  const productData: ProductValidationData = req.body;
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const validationErrors = validateMultilingualData(productData);
  if (validationErrors.length > 0) {
    return res.status(400).json({ errors: validationErrors });
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
  const rawProductData = mapProductToAPI(productData as Product);
  
  const { error } = await supabaseService.from("products").insert([rawProductData]);
  
  if (error) return res.status(500).json({ error: error.message });
  res.status(201).json({ message: "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω" });
});

// üîπ PATCH /api/products/:id ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞
router.patch("/:id", async (req, res) => {
  const { id } = req.params;
  const updates: ProductValidationData = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
  if (!updates || Object.keys(updates).length === 0) {
    return res.status(400).json({ error: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" });
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const validationErrors = validateMultilingualData(updates);
  if (validationErrors.length > 0) {
    return res.status(400).json({ errors: validationErrors });
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  const { data: currentProduct, error: fetchError } = await supabaseService
    .from("products")
    .select("*")
    .eq("id", id)
    .single();
    
  if (fetchError) {
    console.error(fetchError);
    return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
  const currentProductMapped = mapProductFromAPI(currentProduct as RawProduct);
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
  const mergedProduct: Product = {
    ...currentProductMapped,
    ...updates,
    // –î–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π –≤—ã–ø–æ–ª–Ω—è–µ–º –≥–ª—É–±–æ–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
    name: typeof updates.name === 'object' 
      ? { ...currentProductMapped.name as MultilingualString, ...updates.name as MultilingualString }
      : updates.name || currentProductMapped.name,
    price: typeof updates.price === 'object'
      ? { ...currentProductMapped.price as RegionalPrice, ...updates.price as RegionalPrice }
      : updates.price || currentProductMapped.price,
    salePrice: updates.salePrice === undefined 
      ? currentProductMapped.salePrice
      : typeof updates.salePrice === 'object'
        ? { ...currentProductMapped.salePrice as RegionalPrice, ...updates.salePrice as RegionalPrice }
        : updates.salePrice
  };
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
  const rawUpdates = mapProductToAPI(mergedProduct);
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
  const { data, error } = await supabaseService
    .from("products")
    .update(rawUpdates)
    .eq("id", id)
    .select()
    .single();

  if (error) {
    console.error(error);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞" });
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
  const updatedProductMapped = mapProductFromAPI(data as RawProduct);
  
  res.json(updatedProductMapped);
});


// üîπ DELETE /api/products/:id ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
router.delete("/:id", async (req, res) => {
  const { id } = req.params;
  const { error } = await supabaseService.from("products").delete().eq("id", id);
  if (error) return res.status(500).json({ error: error.message });
  res.json({ message: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω" });
});

export default router;
/** 
 * 1. GET /api/products ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
 * 2. GET /api/products/:id ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ id
 * 3. POST /api/products ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
 * 4. PUT /api/products/:id ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
 * 5. DELETE /api/products/:id ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
 * for thunderclient GET http://localhost:3010/api/products?page=2&pageSize=10
 * for thunderclient GET http://localhost:3010/api/products?page=2&pageSize=10
 */
