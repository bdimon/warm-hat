import express from "express";
import { supabase, supabaseService } from "@/lib/supabase-client"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–∞ –∫–ª–∏–µ–Ω—Ç–∞
import { Product, MultilingualString, RegionalPrice, RawProduct, SupportedLanguage } from "@/types/Product";
import { mapProductToAPI, mapProductFromAPI } from "@/lib/mappers/products";

const router = express.Router();

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ Supabase
router.use((req, res, next) => {
  // –î–ª—è —á—Ç–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—ã—á–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  if (req.method === 'GET' && supabase) {
    return next();
  }
  
  // –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω—É–∂–µ–Ω —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
  if ((req.method === 'POST' || req.method === 'PATCH' || req.method === 'DELETE') && !supabaseService) {
    console.error('Service client not available for', req.method, req.url);
    return res.status(503).json({ error: "Service client not available. Check server configuration." });
  }
  
  next();
});

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
interface ProductValidationData extends Partial<Product> {
  name?: string | MultilingualString;
  price?: number | RegionalPrice;
  salePrice?: number | RegionalPrice | undefined;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞
 * @param data - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @returns –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç
 */
const validateMultilingualData = (data: ProductValidationData): string[] => {
  const errors: string[] = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã name
  if (data.name) {
    if (typeof data.name === 'object') {
      const nameObj = data.name as MultilingualString;
      if (!nameObj.en) {
        errors.push("–ü–æ–ª–µ name –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –∞–Ω–≥–ª–∏–π—Å–∫—É—é –≤–µ—Ä—Å–∏—é (en)");
      }
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã price
  if (data.price) {
    if (typeof data.price === 'object') {
      const priceObj = data.price as RegionalPrice;
      if (!priceObj.en || typeof priceObj.en !== 'number') {
        errors.push("–ü–æ–ª–µ price –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –∞–Ω–≥–ª–∏–π—Å–∫—É—é –≤–µ—Ä—Å–∏—é (en) —Å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º");
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è price - —á–∏—Å–ª–∞
      Object.entries(priceObj).forEach(([lang, value]) => {
        if (typeof value !== 'number') {
          errors.push(`–¶–µ–Ω–∞ –¥–ª—è —è–∑—ã–∫–∞ ${lang} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º`);
        }
      });
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã salePrice, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
  if (data.salePrice !== undefined && data.salePrice !== null) {
    if (typeof data.salePrice === 'object') {
      const salePriceObj = data.salePrice as RegionalPrice;
      if (!salePriceObj.en || typeof salePriceObj.en !== 'number') {
        errors.push("–ü–æ–ª–µ salePrice –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –∞–Ω–≥–ª–∏–π—Å–∫—É—é –≤–µ—Ä—Å–∏—é (en) —Å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º");
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è salePrice - —á–∏—Å–ª–∞
      Object.entries(salePriceObj).forEach(([lang, value]) => {
        if (typeof value !== 'number') {
          errors.push(`–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–ª—è —è–∑—ã–∫–∞ ${lang} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º`);
        }
      });
    }
  }
  
  return errors;
}

// üîÅ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–º –ø–æ–ª—è–º
router.get("/", async (req, res) => {
  try {
    const page = parseInt(req.query.page as string) || 1;
    const pageSize = parseInt(req.query.pageSize as string) || 20;
    const sortBy = (req.query.sortBy as string) || "created_at";
    const order = (req.query.order as string) === "asc" ? "asc" : "desc";
    const language = (req.query.language as SupportedLanguage) || 'en';

    const minPrice = parseInt(req.query.minPrice as string) || 0;
    const maxPrice = parseInt(req.query.maxPrice as string) || Number.MAX_SAFE_INTEGER;

    const from = (page - 1) * pageSize;
    const to = from + pageSize - 1;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON-–ø—É—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–µ–Ω–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —è–∑—ã–∫–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
    const pricePath = `price->${language}`;
    
    console.log(`Fetching products: page=${page}, pageSize=${pageSize}, sortBy=${sortBy}, order=${order}, language=${language}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π
    let query = supabase
      .from("products")
      .select("*", { count: "exact" });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ü–µ–Ω–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try {
      query = query
        .gte(pricePath, minPrice)
        .lte(pricePath, maxPrice);
    } catch (e) {
      console.warn("Error applying price filter:", e);
      // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ JSON-–ø—É—Ç–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Å —É—á–µ—Ç–æ–º –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π
    try {
      if (sortBy === "price") {
        query = query.order(pricePath, { ascending: order === "asc" });
      } else if (sortBy === "name") {
        query = query.order(`name->${language}`, { ascending: order === "asc" });
      } else {
        query = query.order(sortBy, { ascending: order === "asc" });
      }
    } catch (e) {
      console.warn("Error applying sorting:", e);
      // –ï—Å–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ JSON-–ø—É—Ç–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ id
      query = query.order('id', { ascending: order === "asc" });
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    query = query.range(from, to);
    
    const { data, error, count } = await query;

    if (error) {
      console.error("Error fetching products:", error);
      return res.status(500).json({ error: error.message });
    }

    if (!data) {
      return res.json({
        data: [],
        pagination: {
          page,
          pageSize,
          total: 0,
          totalPages: 0,
        },
      });
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    const mappedData = data.map(item => {
      try {
        return mapProductFromAPI(item as RawProduct);
      } catch (e) {
        console.error("Error mapping product:", e, item);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
          id: item.id,
          name: typeof item.name === 'object' ? item.name : { en: String(item.name || 'Unknown') },
          price: typeof item.price === 'object' ? item.price : { en: Number(item.price || 0) },
          // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
          images: [],
          category: 'unknown',
        } as Product;
      }
    });

    res.json({
      data: mappedData,
      pagination: {
        page,
        pageSize,
        total: count || 0,
        totalPages: count ? Math.ceil(count / pageSize) : 0,
      },
    });
  } catch (e) {
    console.error("Unexpected error in GET /products:", e);
    res.status(500).json({ error: e instanceof Error ? e.message : "Unknown error" });
  }
});

// üîπ GET /api/products/:id ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ id
router.get("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`Fetching product with ID: ${id}`);
    
    const { data, error } = await supabase
      .from("products")
      .select("*")
      .eq("id", id)
      .single();
    
    if (error) {
      console.error(`Error fetching product ${id}:`, error);
      return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    
    if (!data) {
      return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      const mappedData = mapProductFromAPI(data as RawProduct);
      res.json(mappedData);
    } catch (e) {
      console.error(`Error mapping product ${id}:`, e, data);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞" });
    }
  } catch (e) {
    console.error("Unexpected error in GET /products/:id:", e);
    res.status(500).json({ error: e instanceof Error ? e.message : "Unknown error" });
  }
});

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
// üîπ POST /api/products ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
router.post("/", async (req, res) => {
  try {
    const productData: ProductValidationData = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validationErrors = validateMultilingualData(productData);
    if (validationErrors.length > 0) {
      return res.status(400).json({ errors: validationErrors });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!productData.name || !productData.price || !productData.category) {
      return res.status(400).json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: name, price, category" });
    }
    
    console.log("Creating new product:", JSON.stringify(productData, null, 2));
    
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
      const rawProductData = mapProductToAPI(productData as Product);
      
      const { error } = await supabaseService.from("products").insert([rawProductData]);
      
      if (error) {
        console.error("Error creating product:", error);
        return res.status(500).json({ error: error.message });
      }
      
      res.status(201).json({ message: "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω" });
    } catch (e) {
      console.error("Error mapping or inserting product:", e);
      res.status(500).json({ error: e instanceof Error ? e.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞" });
    }
  } catch (e) {
    console.error("Unexpected error in POST /products:", e);
    res.status(500).json({ error: e instanceof Error ? e.message : "Unknown error" });
  }
});

// üîπ PATCH /api/products/:id ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞
router.patch("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const updates: ProductValidationData = req.body;

    console.log(`Updating product ${id}:`, JSON.stringify(updates, null, 2));

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
    if (!updates || Object.keys(updates).length === 0) {
      return res.status(400).json({ error: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" });
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validationErrors = validateMultilingualData(updates);
    if (validationErrors.length > 0) {
      return res.status(400).json({ errors: validationErrors });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    const { data: currentProduct, error: fetchError } = await supabaseService
      .from("products")
      .select("*")
      .eq("id", id)
      .single();
      
    if (fetchError) {
      console.error(`Error fetching product ${id} for update:`, fetchError);
      return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    
    if (!currentProduct) {
      return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
      const currentProductMapped = mapProductFromAPI(currentProduct as RawProduct);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
      const mergedProduct: Product = {
        ...currentProductMapped,
        ...updates,
        // –î–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π –≤—ã–ø–æ–ª–Ω—è–µ–º –≥–ª—É–±–æ–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
        name: typeof updates.name === 'object' 
          ? { ...currentProductMapped.name as MultilingualString, ...updates.name as MultilingualString }
          : updates.name || currentProductMapped.name,
        price: typeof updates.price === 'object'
          ? { ...currentProductMapped.price as RegionalPrice, ...updates.price as RegionalPrice }
          : updates.price || currentProductMapped.price,
        salePrice: updates.salePrice === undefined 
          ? currentProductMapped.salePrice
          : typeof updates.salePrice === 'object'
            ? { ...currentProductMapped.salePrice as RegionalPrice, ...updates.salePrice as RegionalPrice }
            : updates.salePrice
      };
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
      const rawUpdates = mapProductToAPI(mergedProduct);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
      const { data, error } = await supabaseService
        .from("products")
        .update(rawUpdates)
        .eq("id", id)
        .select()
        .single();

      if (error) {
        console.error(`Error updating product ${id}:`, error);
        return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞" });
      }

      if (!data) {
        return res.status(404).json({ error: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" });
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
      const updatedProductMapped = mapProductFromAPI(data as RawProduct);
      
      res.json(updatedProductMapped);
    } catch (e) {
      console.error(`Error mapping product ${id} for update:`, e);
      res.status(500).json({ error: e instanceof Error ? e.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞" });
    }
  } catch (e) {
    console.error("Unexpected error in PATCH /products/:id:", e);
    res.status(500).json({ error: e instanceof Error ? e.message : "Unknown error" });
  }
});


// üîπ DELETE /api/products/:id ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
router.delete("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`Deleting product ${id}`);
    
    const { error } = await supabaseService.from("products").delete().eq("id", id);
    
    if (error) {
      console.error(`Error deleting product ${id}:`, error);
      return res.status(500).json({ error: error.message });
    }
    
    res.json({ message: "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω" });
  } catch (e) {
    console.error("Unexpected error in DELETE /products/:id:", e);
    res.status(500).json({ error: e instanceof Error ? e.message : "Unknown error" });
  }
});

export default router;
/** 
 * 1. GET /api/products ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
 * 2. GET /api/products/:id ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ id
 * 3. POST /api/products ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
 * 4. PUT /api/products/:id ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
 * 5. DELETE /api/products/:id ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
 * for thunderclient GET http://localhost:3010/api/products?page=2&pageSize=10
 * for thunderclient GET http://localhost:3010/api/products?page=2&pageSize=10
 */
