import express from "express";
import { supabase, supabaseService } from "@/lib/supabase-client"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–∞ –∫–ª–∏–µ–Ω—Ç–∞
import {Order} from "@/types/supabase";
import { RegionalPrice } from "@/types/Product";

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏ –¥–ª—è —Å–ø–∏—Å–∫–∞
interface EnrichedOrder extends Order {
  auth_user_email?: string;
}

const router = express.Router();

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ supabaseService –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
router.use((req, res, next) => {
  // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ GET (–≤—Å–µ), GET (–ø–æ ID –∞–¥–º–∏–Ω–æ–º), PATCH - –∞–¥–º–∏–Ω—Å–∫–∏–µ
  if ((req.method === 'GET' || req.method === 'PATCH') && req.path !== '/' && !supabaseService) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º POST –∏ –∫–æ—Ä–Ω–µ–≤–æ–π GET –µ—Å–ª–∏ –æ–Ω –ø—É–±–ª–∏—á–Ω—ã–π
  }
  if ((req.method === 'PATCH' || (req.method === 'GET' && req.path === '/')) && !supabaseService) { // –ï—Å–ª–∏ GET –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ - –∞–¥–º–∏–Ω—Å–∫–∏–π
    return res.status(503).json({ error: "Service client (supabaseService) not available for admin operations." });
  }
  next();
});

router.post("/", async (req, res) => {
  const { items, total, customer_address, customer_email, customer_name, payment_method, status } =
    req.body;

  if (
    !items ||
    !total ||
    !customer_name ||
    !customer_email ||
    !customer_address ||
    !payment_method
  ) {
    return res.status(400).json({ error: "Missing required fields" });
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–ø—Ä–∏–º–µ—Ä—ã)
  if (typeof total !== 'number' && typeof total !== 'object' || total <= 0) {
    return res.status(400).json({ error: "Invalid total amount" });
  }
  if (!Array.isArray(items) || items.length === 0) {
    return res.status(400).json({ error: "Items must be a non-empty array" });
  }
  // TODO: –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∞ email, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã items –∏ —Ç.–¥.

  // Convert total to RegionalPrice if it's a number
  const formattedTotal = typeof total === 'number' 
    ? { en: total, ru: total, ua: total, pl: total } // Create basic multilingual object
    : total;

  const { error } = await supabase.from('orders').insert([
    {
      items,
      total: formattedTotal,
      customer_address,
      customer_email,
      customer_name,
      payment_method,
      status: status || 'new',
    }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º supabase (anon) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø—É–±–ª–∏—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
  ]);

  if (error) {
    return res.status(500).json({ error: error.message });
  }

  res.status(201).json({ message: 'Order created successfully' });
});

router.get("/", async (req, res) => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º supabaseService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω. –æ–ø–µ—Ä–∞—Ü–∏—è)
  if (!supabaseService) {
    return res.status(503).json({ error: "Service client not configured for this operation." });
  }

  const { data: ordersData, error } = await supabaseService.from("orders")
    .select("*")
    .order("created_at", { ascending: false })
    .returns<Order[]>(); // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –º–∞—Å—Å–∏–≤ Order

  if (error) return res.status(500).json({ error: error.message });

  if (!ordersData) {
    return res.json([]); // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  }

  // –û–±–æ–≥–∞—â–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ email-–∞–¥—Ä–µ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const enrichedOrders: EnrichedOrder[] = await Promise.all(
    ordersData.map(async (order) => {
      const enrichedOrder: EnrichedOrder = { ...order };
      if (order.user_id) {
        const { data: { user: authUser } } = await supabaseService.auth.admin.getUserById(order.user_id);
        if (authUser) {
          enrichedOrder.auth_user_email = authUser.email;
        }
      }
      return enrichedOrder;
    })
  );


  if (error) return res.status(500).json({ error: error.message }); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º error.message
  res.json(enrichedOrders);
});

// üîπ GET /api/orders/:id ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
router.get("/:id", async (req, res) => {
  const { id } = req.params;
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º supabaseService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ ID (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω. –æ–ø–µ—Ä–∞—Ü–∏—è)
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–∏–º –∑–∞–∫–∞–∑–∞–º, –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–µ–µ –∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç JWT
  if (!supabaseService)
    return res.status(503).json({ error: 'Service client not configured for this operation.' });

  const { data: orderData, error: orderError } = await supabaseService
    .from('orders')
    .select('*')
    .eq('id', id)
    .single<Order>();

  if (orderError || !orderData) {
    // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ !orderData
    return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  const enrichedOrderData: EnrichedOrder = { ...orderData }; // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞

  // –ï—Å–ª–∏ —É –∑–∞–∫–∞–∑–∞ –µ—Å—Ç—å user_id, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ auth.users
  if (orderData.user_id) {
    try {
      const {
        data: { user: authUser },
        error: authUserError,
      } = await supabaseService.auth.admin.getUserById(orderData.user_id);
      if (!authUserError && authUser) {
        enrichedOrderData.auth_user_email = authUser.email; // –î–æ–±–∞–≤–ª—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      } else if (authUserError) {
        console.warn(
          `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${orderData.user_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderData.id}: ${authUserError.message}`
        );
      }
    } catch (e) {
      console.warn(
        `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${orderData.user_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderData.id}:`,
        e
      );
    }
  }

  res.json(enrichedOrderData); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
});

router.patch("/:id", async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º supabaseService –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω. –æ–ø–µ—Ä–∞—Ü–∏—è)
  if (!supabaseService) return res.status(503).json({ error: "Service client not configured for this operation." });
  const { data, error } = await supabaseService.from("orders")
    .update({ status })
    .eq("id", id)
    .select()
    .single();

  if (error) return res.status(500).json({ error });
  res.json(data);
});

// üîπ DELETE /api/orders/:id ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑
router.delete("/:id", async (req, res) => {
  const { id } = req.params;
  if (!supabaseService) {
    return res.status(503).json({ error: "Service client not configured for this operation." });
  }

  const { error } = await supabaseService.from("orders").delete().eq("id", id);

  if (error) return res.status(500).json({ error: error.message });
  res.json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" });
});



export default router;
